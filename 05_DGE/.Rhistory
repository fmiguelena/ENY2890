### (1) Read in counts data ###
## OPTION A: read in single file with all counts
## (compiled using Google Sheets or Excel)
## set working directory to source file location
setwd("~/Documents/2023/03_CURE/ENY2890/05_DGE")
## read in the already-concatenated counts file
counts <- read.csv("counts_example.csv", header=T)
## if your counts file still has the information for feature
## mapping at the bottom, you can get rid of it using
counts <- counts %>%
filter(!grepl('_', gene_id))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
## OPTION A: read in single file with all counts
## (compiled using Google Sheets or Excel)
## set working directory to source file location
setwd("~/Documents/2023/03_CURE/ENY2890/05_DGE")
## read in the already-concatenated counts file
counts <- read.csv("counts_example.csv", header=T)
## if your counts file still has the information for feature
## mapping at the bottom, you can get rid of it using
counts <- counts %>%
filter(!grepl('_', gene_id))
library(dplyr)
library(tidyverse)
## if your counts file still has the information for feature
## mapping at the bottom, you can get rid of it using
counts <- counts %>%
filter(!grepl('_', gene_id))
## change directory to the one where your metadata is located
## unless you're already in that directory
setwd("/Users/rkeatinggodfrey/Documents/2023/03_CURE/DESeq2")
## Import metadata (colData) ###
metadata <- read.csv("/Users/rkeatinggodfrey/Documents/2023/03_CURE/DESeq2/DGE_cure/metadata_example.csv")
## **ONLY RUN If you imported the directory to create the counts dataframe,
## add file names to metadata**
metadata$sample.name <-file.names
## create a new data frame that contains only the columns you need
## for the example metadata this is in columns 1, 2, and 3.
meta <- metadata[,c(1,2,3)]
## you can rename the columns to match the rest of the script
colnames(meta) <-c("sample","sex","body_part")
## make sure sex and body part are factors (categorical data)
## for more about factors and data types in R, see:
## https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors.html
meta$sex <-as.factor(meta$sex)
meta$body_part <-as.factor(meta$body_part)
## check that they are factors (this should return "TRUE")
is.factor(meta$sex)
is.factor(meta$body_part)
### Construct a DESeq data set object ###
## This object stores all of the input data needed to run differential
## expression analysis
dds.gen <-DESeqDataSetFromMatrix(countData=counts, # the counts data object
colData=meta, # the meta data
design=~sex, # the statistical design
tidy=T)
### Run DESeq analyis using the DESeq function###
dds.gen <- DESeq(dds.gen)
## If you used a counts file with multiple body parts, you can subset the dds
## object and run results and summary on it
dds.sub <- dds.gen[ , dds.gen$body_part %in% c("Genitalia") ]
## Get a table of the results
## This is going to summarize the findings into a table
## And pick out the specific comparison you are trying to make
## Remember in this example data set I only have genitalia samples
## so I want the results to look at the variable "sex"
## and the levels "males" and "females"
results.gen <-results(dds.gen, contrast=c("sex","Male","Female"))
## Look at summary of analysis
## This will tell you how many genes showed
## a positive difference in expression (LFC = log fold change)
## a negative difference in expression
## in my case in Males vs Females as stated above
summary(results.gen)
## Look at the top of the results file ordered by adjusted p-value
results.gen <- results.gen[order(results.gen$padj),]
head(results.gen)
## You can save this results file as a csv in your current working directory
write.csv(results.gen,"Genitalia_Males_v_Females_Results_table_01.csv")
setwd("~/Documents/2023/03_CURE/ENY2890/05_DGE")
## You can save this results file as a csv in your current working directory
write.csv(results.gen,"Genitalia_Males_v_Females_Results_table_01.csv")
## You can make a PCA plot of the data to see where samples cluster
## first transform the data
res.transform <- rlog(dds.gen)
## then use the PCA plot function to display comparisons
## across one of your variables
plotPCA(res.transform, intgroup="sex")
View(res.transform)
head(res.transform)
?rlog
dists <- dist(t(assay(res.transform))
dists <- dist(t(assay(res.transform)))
plot(hclust(dists))
## then use the PCA plot function to display comparisons
## across one of your variables
plotPCA(res.transform, intgroup="sex")
requre(DOSE)
reqiure(DOSE)
require(DOSE)
require (clusterProfiler)
data("geneList")
data(geneList)
head geneList
head(geneList)
deg <- names(geneList)[abs(geneList)>2]
## if it's not already in your Global Environment, import the
## annotated data frame
result.annotated <- read.csv("Genitalia_Males_v_Females_Results_table_02.csv", header=T)
gda <- result.annotated
dim(gda)
head(gda)
test <-as.data.frame(deg)
View(test)
results.table <- as.data.frame(results.gen)
results.table <- tibble::rownames_to_column(results.table,"geneID")
genes <-results.table$geneID
genes <-results.annotated$geneID
## if it's not already in your Global Environment, import the
## annotated data frame
results.annotated <- read.csv("Genitalia_Males_v_Females_Results_table_02.csv", header=T)
genes <-results.annotated$geneID
## create a dataframe limited to significant targets
sig.results <-subset(results.annotated,results.annotated$padj <0.05)
write.csv(sig.results, "Sig_Results_Geni_Log2FC.csv")
gda <- result.sig
## create a dataframe limited to significant targets
results.sig <-subset(results.annotated,results.annotated$padj <0.05)
write.csv(sig.results, "Sig_Results_Geni_Log2FC.csv")
##----- Female vs. Male genitalia -----##
## subset results table to only fields of interest
viz.results <- results.sig[,c(1,2,3,7,9,10,14,15,18,27)]
## Volcano Plot of all targets
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(colour="purple")+
xlim(-35,35)+ # this sets the scale for the x-axis
theme_classic()
View(viz.results)
View(sig.results)
## if it's not already in your Global Environment, import the
## annotated data frame
results.annotated <- read.csv("Genitalia_Males_v_Females_Results_table_02.csv", header=T)
## create a dataframe limited to significant targets
results.sig <-subset(results.annotated,results.annotated$padj <0.05)
View(results.sig)
View(results.annotated)
## if it's not already in your Global Environment, import the
## annotated data frame
results.annotated <- read.csv("Genitalia_Males_v_Females_Results_table_02.csv",
header=T,
row.names = F)
## if it's not already in your Global Environment, import the
## annotated data frame
results.annotated <- read.csv("Genitalia_Males_v_Females_Results_table_02.csv",
header=T)
View(results.annotated)
### (1) Read in counts data ###
## OPTION A: read in single file with all counts
## (compiled using Google Sheets or Excel)
## set working directory to source file location
setwd("~/Documents/2023/03_CURE/ENY2890/05_DGE")
## read in the already-concatenated counts file
counts <- read.csv("counts_example.csv", header=T)
## if your counts file still has the information for feature
## mapping at the bottom, you can get rid of it using
counts <- counts %>%
filter(!grepl('_', gene_id))
### (2) Import metadata file ###
## change directory to the one where your metadata is located
## unless you're already in that directory
setwd("/Users/rkeatinggodfrey/Documents/2023/03_CURE/DESeq2")
## Import metadata (colData) ###
metadata <- read.csv("/Users/rkeatinggodfrey/Documents/2023/03_CURE/DESeq2/DGE_cure/metadata_example.csv",
header=T)
## **ONLY RUN If you imported the directory to create the counts dataframe,
## add file names to metadata**
metadata$sample.name <-file.names
## create a new data frame that contains only the columns you need
## for the example metadata this is in columns 1, 2, and 3.
meta <- metadata[,c(1,2,3)]
## you can rename the columns to match the rest of the script
colnames(meta) <-c("sample","sex","body_part")
## make sure sex and body part are factors (categorical data)
## for more about factors and data types in R, see:
## https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors.html
meta$sex <-as.factor(meta$sex)
meta$body_part <-as.factor(meta$body_part)
## check that they are factors (this should return "TRUE")
is.factor(meta$sex)
is.factor(meta$body_part)
### Construct a DESeq data set object ###
## This object stores all of the input data needed to run differential
## expression analysis
dds.gen <-DESeqDataSetFromMatrix(countData=counts, # the counts data object
colData=meta, # the meta data
design=~sex, # the statistical design
tidy=T)
### Run DESeq analyis using the DESeq function###
dds.gen <- DESeq(dds.gen)
## Get a table of the results
## This is going to summarize the findings into a table
## And pick out the specific comparison you are trying to make
## Remember in this example data set I only have genitalia samples
## so I want the results to look at the variable "sex"
## and the levels "males" and "females"
results.gen <-results(dds.gen, contrast=c("sex","Male","Female"))
## You can save this results file as a csv in your current working directory
write.csv(results.gen,"Genitalia_Males_v_Females_Results_table_01.csv")
results.table <- as.data.frame(results.gen)
results.table <- tibble::rownames_to_column(results.table,"geneID")
## read in the annotation file made from coding sequences
annot <- read.csv("rna.annot.cds.emapper.annotations.geneID.csv", header=T)
## read in the annotation file made from coding sequences
annot <- read.csv("rna.annot.cds.emapper.annotations.geneID.csv", header=T)
setwd("~/Documents/2023/03_CURE/ENY2890/05_DGE")
## read in the annotation file made from coding sequences
annot <- read.csv("rna.annot.cds.emapper.annotations.geneID.csv", header=T)
## merge DGE with annotation file
results.annotated <-merge(results.table,annot, by=c("geneID"))
ids.counts <- as.data.frame(results.table$geneID)
colnames(ids.counts) <-c("geneIDs")
ids.annot <- as.data.frame(annot$geneID)
colnames(ids.annot) <-c("geneIDs")
ids.not.annot <- anti_join(ids.counts,ids.annot)
## you can save this results table that includes
## DGE and functional annotation information as a CSV
## in your working directory
write.csv(results.annotated,"Genitalia_Males_v_Females_Results_table_02.csv",
row.names = F)
## if it's not already in your Global Environment, import the
## annotated data frame
results.annotated <- read.csv("Genitalia_Males_v_Females_Results_table_02.csv",
header=T)
View(results.annotated)
## create a dataframe limited to significant targets
results.sig <-subset(results.annotated,results.annotated$padj <0.05)
write.csv(sig.results, "Sig_Results_Geni_Log2FC.csv")
write.csv(results.sig, "Sig_Results_Geni_Log2FC.csv")
##----- Female vs. Male genitalia -----##
## subset results table to only fields of interest
viz.results <- results.sig[,c(1,2,3,7,9,10,14,15,18,27)]
## Volcano Plot of all targets
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(colour="purple")+
xlim(-35,35)+ # this sets the scale for the x-axis
theme_classic()
deg.genes <-results.sig$geneID
gda <- results.annotated
dim(gda)
head(gda)
## Now we need to get KEGG terms associated with those genes
## some genes have mulltiple KOs, so let's makes those show up
## on different rows
kegg <- results.annotated
kegg <- kegg %>% separate_rows(KEGG_ko)
View(kegg)
## Now we need to get KEGG terms associated with those genes
## some genes have mulltiple KOs, so let's makes those show up
## on different rows
kegg <- results.annotated
## remove the "ko;" from in front of every KO term
kegg$KEGG_ko <- gsub("ko:","",as.character(kegg$KEGG_ko))
kegg <- kegg %>% separate_rows(KEGG_ko)
View(kegg)
View(kegg)
## create a data frame of KEGG to gene id
kegg2gene <-kegg[, c("KEGG_ko","geneID")]
?enricher
x <- enricher(deg.genes, TERM2GENE=kegg2gene)
head(summary(x))
barplot(x)
kegg2name <-kegg[, c("KEGG_ko","Description")]
x <- enricher(deg.genes, TERM2GENE=kegg2gene, TERM2NAME=kegg2name)
head(summary(x))
enricher(deg.genes, TERM2GENE=kegg2gene, TERM2NAME=kegg2name)
## remove empty entries
kegg <- subset(kegg,kegg$KEGG_ko !="")
## remove the "ko;" from in front of every KO term
kegg$KEGG_ko <- gsub("ko:","",as.character(kegg$KEGG_ko))
## Now we need to get KEGG terms associated with those genes
## some genes have mulltiple KOs, so let's makes those show up
## on different rows
kegg <- results.annotated
## remove empty entries
kegg <- subset(kegg,kegg$KEGG_ko !="")
## remove the "ko;" from in front of every KO term
kegg$KEGG_ko <- gsub("ko:","",as.character(kegg$KEGG_ko))
kegg <- kegg %>% separate_rows(KEGG_ko)
kegg <- subset(kegg,kegg$KEGG_ko !="")
## create a data frame of KEGG to gene id
kegg2gene <-kegg[, c("KEGG_ko","geneID")]
kegg2name <-kegg[, c("KEGG_ko","Description")]
## create a data frame of KEGG to gene id
kegg2gene <-kegg[, c("KEGG_ko","geneID")]
enricher(deg.genes, TERM2GENE=kegg2gene)
go <- results.annotated
View(go)
## remove empty entries
go <- subset(kegg,kegg$GOs !="-")
## remove the "ko;" from in front of every KO term
go$GOs <- gsub("GO:","GO",as.character(kegg$KEGG_ko))
## remove the "ko;" from in front of every KO term
go$GOs <- gsub("GO:","GO",as.character(go$GOs))
go <- go %>% separate_rows(GOs)
View(go)
## create a data frame of KEGG to gene id
go2gene <-go[, c("GOs","geneID")]
enricher(deg.genes, TERM2GENE=go2gene)
x <- enricher(deg.genes, TERM2GENE=go2gene)
head(summary(x))
barplot(x)
## Because we compared Males to Females, genes with
## NEGATIVE Log2FC values were detected at higher expression
## levels in females
## So you can get a list of these by subsetting the significant results to
## those with Log2FC < 0
l2fc.f <-subset(results.sig,results.sig$log2FoldChange < 0)
deg.genes.f <-l2fc.f$geneID
## FEMALE enrichment analysis (in the clusterProfiler package)
enriched.f <- enricher(deg.genes.f, TERM2GENE=go2gene)
head(summary(enriched.f))
barplot(enriched.f)
go.m <- subset(go,go$log2FoldChange > 0)
## create a data frame of GO to gene id to use in enrichment analysis
go2gene.m <-go.m[, c("GOs","geneID")]
## FEMALE enrichment analysis (in the clusterProfiler package)
enriched.f <- enricher(deg.genes.f, TERM2GENE=go2gene.m)
head(summary(enriched.f))
