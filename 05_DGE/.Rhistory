ggplot(data = sig.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(colour="purple")+
ylim(-35,35)+
theme_classic()
## Volcano Plot of all targets
ggplot(data = sig.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(colour="purple")+
xlim(-35,35)+
theme_classic()
View(sig.results)
## Volcano Plot of all targets with significance designated
ggplot(data = sig.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(color=dplyr::case_when(sig.results$padj > .0001 ~ "grey",
sig.results$log2FoldChange > 3 ~ "blue",
sig.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_vline(xintercept=3, colour="blue", linetype="dashed")+
geom_vline(xintercept=-3, colour="blue", linetype="dashed")+
geom_hline(yintercept=4, colour="blue", linetype="dashed")+
ggtitle("Female vs. Male Genitalia")+
xlim(-35,35)+
theme_classic()
## Volcano Plot of sig targets with protein family labels
ggplot(data = sig.results, aes(x = log2FoldChange, y = -log10(padj),
label = PFAMs))+
geom_point(color=dplyr::case_when(sig.results$padj > .0001 ~ "grey",
sig.results$log2FoldChange > 3 ~ "blue",
sig.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_text_repel(data = subset(sig.results, log2FoldChange > 3
& sig.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
geom_text_repel(data = subset(sig.results, log2FoldChange < -3
& sig.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
ggtitle("Female vs Male Genitalia")+
theme_classic()
BiocManager::install("clusterProfiler")
## create a dataframe limited to ony significant targets
sig.results <-subset(results.annotated,results.annotated$padj <0.05)
##----- Female vs. Male genitalia -----##
## subset results table to only fields of interest
viz.results <- sig.results[,c(1,2,3,7,9,10,14,15,18,27)]
View(sig.results)
colnames[sig.results]
colnames(sig.results)
## Get the columns you need from sig.results
kegg.data <- sig.results[,c("geneID","KEGG_ko
")]
## Get the columns you need from sig.results
kegg.data <- sig.results[,c("geneID","KEGG_ko")]
## Get the columns you need from sig.results
kegg <- sig.results[,c("geneID","KEGG_ko")]
## remove the "ko;" from in front of every KO term
kegg$KEGG_ko <- gsub("ko:","",as.character(kegg$KEGG_ko))
kegg <- kegg[, list(KEGG.KO = unlist(strsplit(KEGG_ko , ","))), by = Query]
kegg <- kegg[, list(KEGG.KO = unlist(strsplit(KEGG_ko , ","))), by = geneID]
kegg <- kegg[, list(KEGG_ko = unlist(strsplit(KEGG_ko , ","))), by = geneID]
View(kegg)
View(kegg)
kegg <- kegg[order(KEGG_ko)]
kegg <- kegg[order(kegg$KEGG_ko)]
colnames(kegg)
kegg$KEGG_ko <- sort(kegg$KEGG_ko)
View(kegg)
?sort
kegg$KEGG_ko <- sort(kegg$KEGG_ko, decreasing=T)
View(kegg)
kegg <- kegg[, list(KEGG_ko = unlist(strsplit(KEGG_ko , ","))), by = geneID]
test <- kegg %>% separate_rows(KEGG_ko)
library(dplyr)
test <- kegg %>% separate_rows(KEGG_ko)
?separate_rows
library(tidyverse)
test <- kegg %>% separate_rows(KEGG_ko)
View(test)
kegg.final <- kegg[,c(2,1)]
View(kegg.final)
geneID <- kegg.final$geneID
enr_res <- enricher(geneID, TERM2GENE=kegg.final,
pvalueCutoff = 0.05, pAdjustMethod = "BH",
qvalueCutoff = 0.05, minGSSize = 10)
library(enrichplot)
enr_res <- enricher(geneID, TERM2GENE=kegg.final,
pvalueCutoff = 0.05, pAdjustMethod = "BH",
qvalueCutoff = 0.05, minGSSize = 10)
?enricher
library(clusterProfiler)
enr_res <- enricher(geneID, TERM2GENE=kegg.final,
pvalueCutoff = 0.05, pAdjustMethod = "BH",
qvalueCutoff = 0.05, minGSSize = 10)
# write the results of the analysis
write.table(enr_res, file = "KOenr_results_example.csv") # write table
## Get the columns you need from sig.results
kegg <- results.annotated[,c("geneID","KEGG_ko")]
## remove the "ko;" from in front of every KO term
kegg$KEGG_ko <- gsub("ko:","",as.character(kegg$KEGG_ko))
## expand the KO term column,
## since some genes/proteins will have more than on KO term
kegg <- data.table(kegg)
library(data.table)
## expand the KO term column,
## since some genes/proteins will have more than on KO term
kegg <- data.table(kegg)
kegg <- kegg %>% separate_rows(KEGG_ko)
kegg.final <- kegg[,c(2,1)]
## Now let's make a vector of the geneIDs that were
## showed significant diffrences in expression
geneID <- sig.results$geneID
enr_res <- enricher(geneID, TERM2GENE=kegg.final,
pvalueCutoff = 0.05, pAdjustMethod = "BH",
qvalueCutoff = 0.05, minGSSize = 10)
View(enr_res)
# write the results of the analysis
write.table(enr_res, file = "KOenr_results_example.csv") # write table
# write the results of the analysis
write.table(enr_res, file = "KOenr_results_example.csv") # write table
dotplot(enr_res, showCategory=30)
summary(enr_res)
enr_res2 <- as.data.frame(enr_res)
View(enr_res2)
## Now let's make a vector of the geneIDs that were
## showed significant diffrences in expression
geneID <- as.data.frame(sig.results$geneID)
enr_res <- enricher(geneID, TERM2GENE=kegg.final,
pvalueCutoff = 0.05, pAdjustMethod = "BH",
qvalueCutoff = 0.05, minGSSize = 10)
View(geneID)
colnames(geneID) <-c("geneID")
enr_res <- enricher(geneID, TERM2GENE=kegg.final,
pvalueCutoff = 0.05, pAdjustMethod = "BH",
qvalueCutoff = 0.05, minGSSize = 10)
View(enr_res2)
View(kegg.final)
View(kegg.final)
View(geneID)
enr_res <- enricher(geneID, TERM2GENE=kegg.final,
pvalueCutoff = 0.05, pAdjustMethod = "BH",
qvalueCutoff = 0.05, minGSSize = 10)
?enricher
View(kegg.final)
View(kegg.final)
View(kegg.final)
View(geneID)
View(counts)
View(counts)
geneID.counts <- as.data.frame(results.table$geneID)
geneID.annot <- as.data.frame(annot$geneID)
ids.counts <- as.data.frame(results.table$geneID)
ids.annot <- as.data.frame(annot$geneID)
ids.not.annot <- anti_join(ids.counts,ids.annot)
View(ids.annot)
View(ids.counts)
ids.counts <- as.data.frame(results.table$geneID)
colnames(ids.counts) <-c("geneIDs")
ids.annot <- as.data.frame(annot$geneID)
colnames(ids.annot) <-c("geneIDs")
ids.not.annot <- anti_join(ids.counts,ids.annot)
View(ids.not.annot)
## if your counts file still has the information at the bottom
## you can get rid of it
counts %>%
filter(!grepl('_', geneID))
## if your counts file still has the information at the bottom
## you can get rid of it
counts <- counts %>%
filter(!grepl('_', geneID))
View(counts)
View(counts)
## if your counts file still has the information at the bottom
## you can get rid of it
counts <- counts %>%
filter(!grepl('_', gene_id))
View(counts)
## Import metadata (colData) ###
metadata <- read.csv("/Users/rkeatinggodfrey/Documents/2023/03_CURE/DESeq2/DGE_cure/metadata_example.csv")
## **ONLY RUN If you imported the directory to create the counts dataframe,
## add file names to metadata**
metadata$sample.name <-file.names
## Look at the top of the results file ordered by adjusted p-value
results.gen <- results.gen[order(results.gen$padj),]
head(results.gen)
## You can save this results file as a csv in your current working directory
write.csv(results.gen,"Genitalia_Males_v_Females_Results_table_01.csv")
### (4) Merge results with functional annotation ###
## To run this part of the script you need a file with
## a functional annotation of the genome
## you can copy this file from the shared folder on HiperGator
## /blue/eny2890/share/05_dge/rna.annot.cds.emapper.annotations
## then download it, open in excel and save as .csv
## or download it in csv format from our github
## First, let's get out gene IDs into column names because
## we need to merge the DESeq2 results with the
## functional annotation based on those names
## The geneIDs are the row names in the original results table
## turn them into a column to merge with functional annotation from eggnog
library(tibble)
results.table <- as.data.frame(results.gen)
results.table <- tibble::rownames_to_column(results.table,"geneID")
## read in the annotation file
annot <- read.csv("rna.annot.cds.emapper.annotations.geneID.csv", header=T)
## merge DGE with annotation file
results.annotated <-merge(results.table,annot, by=c("geneID"))
## note that the annotation file only has 16225 observations
## but your counts file likely has many more
## we can see which ones are missing
View(ids.not.annot)
ids.counts <- as.data.frame(results.table$geneID)
colnames(ids.counts) <-c("geneIDs")
ids.annot <- as.data.frame(annot$geneID)
colnames(ids.annot) <-c("geneIDs")
ids.not.annot <- anti_join(ids.counts,ids.annot)
View(ids.not.annot)
View(results.table)
## Combine into single dataframe
counts <-bind_cols(all_files)
## read in the already-concatenated counts file
counts <- read.csv("counts_example.csv", header=T)
## if your counts file still has the information for feature
## mapping at the bottom, you can get rid of it using
counts <- counts %>%
filter(!grepl('_', gene_id))
## Import metadata (colData) ###
metadata <- read.csv("/Users/rkeatinggodfrey/Documents/2023/03_CURE/DESeq2/DGE_cure/metadata_example.csv")
## create a new data frame that contains only the columns you need
## for the example metadata this is in columns 1, 2, and 3.
meta <- metadata[,c(1,2,3)]
## you can rename the columns to match the rest of the script
colnames(meta) <-c("sample","sex","body_part")
## make sure sex and body part are factors (categorical data)
## for more about factors and data types in R, see:
## https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors.html
meta$sex <-as.factor(meta$sex)
meta$body_part <-as.factor(meta$body_part)
## check that they are factors (this should return "TRUE")
is.factor(meta$sex)
is.factor(meta$body_part)
### Construct a DESeq data set object ###
## This object stores all of the input data needed to run differential
## expression analysis
dds.gen <-DESeqDataSetFromMatrix(countData=counts, # the counts data object
colData=meta, # the meta data
design=~sex, # the statistical design
tidy=T)
### Run DESeq analyis using the DESeq function###
dds.gen <- DESeq(dds.gen)
## Get a table of the results
## This is going to summarize the findings into a table
## And pick out the specific comparison you are trying to make
## Remember in this example data set I only have genitalia samples
## so I want the results to look at the variable "sex"
## and the levels "males" and "females"
results.gen <-results(dds.gen, contrast=c("sex","Male","Female"))
## Look at summary of analysis
## This will tell you how many genes showed
## a positive difference in expression (LFC = log fold change)
## a negative difference in expression
## in my case in Males vs Females as stated above
summary(results.gen)
## Look at the top of the results file ordered by adjusted p-value
results.gen <- results.gen[order(results.gen$padj),]
head(results.gen)
## You can save this results file as a csv in your current working directory
write.csv(results.gen,"Genitalia_Males_v_Females_Results_table_01.csv")
results.table <- as.data.frame(results.gen)
results.table <- tibble::rownames_to_column(results.table,"geneID")
View(results.table)
## read in the already-concatenated counts file
counts <- read.csv("counts_example.csv", header=T)
View(results.gen)
View(results.table)
## Look at summary of analysis
## This will tell you how many genes showed
## a positive difference in expression (LFC = log fold change)
## a negative difference in expression
## in my case in Males vs Females as stated above
summary(results.gen)
## Look at the top of the results file ordered by adjusted p-value
results.gen <- results.gen[order(results.gen$padj),]
head(results.gen)
## You can save this results file as a csv in your current working directory
write.csv(results.gen,"Genitalia_Males_v_Females_Results_table_01.csv")
## merge DGE with annotation file
results.annotated <-merge(results.table,annot, by=c("geneID"))
## read in the annotation file
annot <- read.csv("rna.annot.cds.emapper.annotations.geneID.csv", header=T)
## merge DGE with annotation file
results.annotated <-merge(results.table,annot, by=c("geneID"))
ids.counts <- as.data.frame(results.table$geneID)
colnames(ids.counts) <-c("geneIDs")
ids.annot <- as.data.frame(annot$geneID)
colnames(ids.annot) <-c("geneIDs")
ids.not.annot <- anti_join(ids.counts,ids.annot)
View(ids.not.annot)
## you can save this results table that includes
## DGE and functional annotation information as a CSV
## in your working directory
write.csv(results.annotated,"Genitalia_Males_v_Females_Results_table_02.csv")
## create a dataframe limited to ony significant targets
sig.results <-subset(results.annotated,results.annotated$padj <0.05)
write.csv(sig.results, "Sig_Results_Geni_Log2FC.csv")
##----- Female vs. Male genitalia -----##
## subset results table to only fields of interest
viz.results <- sig.results[,c(1,2,3,7,9,10,14,15,18,27)]
## Volcano Plot of all targets
ggplot(data = sig.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(colour="purple")+
xlim(-35,35)+ # this sets the scale for the x-axis
theme_classic()
## Volcano Plot of all targets with significance designated
ggplot(data = sig.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(color=dplyr::case_when(sig.results$padj > .0001 ~ "grey",
sig.results$log2FoldChange > 3 ~ "blue",
sig.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_vline(xintercept=3, colour="blue", linetype="dashed")+
geom_vline(xintercept=-3, colour="blue", linetype="dashed")+
geom_hline(yintercept=4, colour="blue", linetype="dashed")+
ggtitle("Female vs. Male Genitalia")+
xlim(-35,35)+
theme_classic()
## Volcano Plot of sig targets with protein family labels
## here the "label =" parameter is set to PFAMs so that protein
## family names will be associated with data points
## You could use "geneID" or "Preferred_name" for this
ggplot(data = sig.results, aes(x = log2FoldChange, y = -log10(padj),
label = PFAMs))+
geom_point(color=dplyr::case_when(sig.results$padj > .0001 ~ "grey",
sig.results$log2FoldChange > 3 ~ "blue",
sig.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_text_repel(data = subset(sig.results, log2FoldChange > 3
& sig.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
geom_text_repel(data = subset(sig.results, log2FoldChange < -3
& sig.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
ggtitle("Female vs Male Genitalia")+
theme_classic()
## read in the annotatoin file made from amino acid sequences
annot.aa <- read.csv("rna.annot.aa.emapper.annotations.geneID.csv", header=T)
setwd("~/Documents/2023/03_CURE/ENY2890/05_DGE")
## read in the annotatoin file made from amino acid sequences
annot.aa <- read.csv("rna.annot.aa.emapper.annotations.geneID.csv", header=T)
View(results.annotated)
View(results.annotated)
View(sig.results)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
BiocManager::install("DESeq2", force=TRUE)
library(DESeq2)
library(dplyr)
library(ggplot2)
install.packages("htmltools")
library(htmltools)
setwd("~/Documents/2023/03_CURE/ENY2890/05_DGE")
## set working directory to source file location
setwd("~/Documents/2023/03_CURE/ENY2890/05_DGE")
## read in the already-concatenated counts file
counts <- read.csv("counts_example.csv", header=T)
## if your counts file still has the information for feature
## mapping at the bottom, you can get rid of it using
counts <- counts %>%
filter(!grepl('_', gene_id))
## Import metadata (colData) ###
metadata <- read.csv("/Users/rkeatinggodfrey/Documents/2023/03_CURE/DESeq2/DGE_cure/metadata_example.csv")
## create a new data frame that contains only the columns you need
## for the example metadata this is in columns 1, 2, and 3.
meta <- metadata[,c(1,2,3)]
## you can rename the columns to match the rest of the script
colnames(meta) <-c("sample","sex","body_part")
## make sure sex and body part are factors (categorical data)
## for more about factors and data types in R, see:
## https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors.html
meta$sex <-as.factor(meta$sex)
meta$body_part <-as.factor(meta$body_part)
## check that they are factors (this should return "TRUE")
is.factor(meta$sex)
is.factor(meta$body_part)
### Construct a DESeq data set object ###
## This object stores all of the input data needed to run differential
## expression analysis
dds.gen <-DESeqDataSetFromMatrix(countData=counts, # the counts data object
colData=meta, # the meta data
design=~sex, # the statistical design
tidy=T)
### Run DESeq analyis using the DESeq function###
dds.gen <- DESeq(dds.gen)
## Get a table of the results
## This is going to summarize the findings into a table
## And pick out the specific comparison you are trying to make
## Remember in this example data set I only have genitalia samples
## so I want the results to look at the variable "sex"
## and the levels "males" and "females"
results.gen <-results(dds.gen, contrast=c("sex","Male","Female"))
## Look at summary of analysis
## This will tell you how many genes showed
## a positive difference in expression (LFC = log fold change)
## a negative difference in expression
## in my case in Males vs Females as stated above
summary(results.gen)
## Look at the top of the results file ordered by adjusted p-value
results.gen <- results.gen[order(results.gen$padj),]
head(results.gen)
?results
test.sub <- results.gen[ , rld$condition %in% c("Male", "Female") ]
test.sub <- results.gen[ , results.gen$condition %in% c("Male", "Female") ]
plotPCA(test.sub, "condition")
View(test.sub)
summary(test.sub)
?plotPCA
plotPCA(results.gen, "condition")
test.sub <- results.gen[ , results.gen$sex %in% c("Male", "Female") ]
plotPCA(results.gen, "sex")
summary(test.sub)
View(meta)
test.sub <- results.gen[ , results.gen$sex %in% c("Male") ]
View(test.sub)
## If you used a counts file with multiple body parts, you can subset
## it to the ones you want to compare
results.sub <- results.gen[ , results.gen$body_part %in% c("Genitalia") ]
head(results.gen)
head(results.sub)
## If you used a counts file with multiple body parts, you can subset the dds
## object and run results and summary on it
dds.sub <- dds.gen[ , dds.gen$body_part %in% c("Genitalia") ]
dds.test <-results(dds.sub, contrast=c("sex","Male","Female"))
summary(dds.test)
## Make PCA plot of the data
res.transform <- rlog(dds.gen)
plotPCA(res.transform)
colData(res.transform)
plotPCA(res.transform, intgroup="Sex")
plotPCA(res.transform, intgroup="sex")
results.table <- as.data.frame(results.gen)
results.table <- tibble::rownames_to_column(results.table,"geneID")
## read in the annotation file made from coding sequences
annot <- read.csv("rna.annot.cds.emapper.annotations.geneID.csv", header=T)
## merge DGE with annotation file
results.annotated <-merge(results.table,annot, by=c("geneID"))
head(results.annotated)
## you can save this results table that includes
## DGE and functional annotation information as a CSV
## in your working directory
write.csv(results.annotated,"Genitalia_Males_v_Females_Results_table_02.csv")
## create a dataframe limited to ony significant targets
sig.results <-subset(results.annotated,results.annotated$padj <0.05)
##----- Female vs. Male genitalia -----##
## subset results table to only fields of interest
viz.results <- sig.results[,c(1,2,3,7,9,10,14,15,18,27)]
## Volcano Plot of all targets
ggplot(data = sig.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(colour="purple")+
xlim(-35,35)+ # this sets the scale for the x-axis
theme_classic()
## Volcano Plot of all targets with significance designated
ggplot(data = sig.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(color=dplyr::case_when(sig.results$padj > .0001 ~ "grey",
sig.results$log2FoldChange > 3 ~ "blue",
sig.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_vline(xintercept=3, colour="blue", linetype="dashed")+
geom_vline(xintercept=-3, colour="blue", linetype="dashed")+
geom_hline(yintercept=4, colour="blue", linetype="dashed")+
ggtitle("Female vs. Male Genitalia")+
xlim(-35,35)+
theme_classic()
## Volcano Plot of all targets with significance designated
ggplot(data = sig.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(color=dplyr::case_when(sig.results$padj > .0001 ~ "grey",
sig.results$log2FoldChange > 3 ~ "blue",
sig.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_vline(xintercept=3, colour="blue", linetype="dashed")+
geom_vline(xintercept=-3, colour="blue", linetype="dashed")+
geom_hline(yintercept=4, colour="blue", linetype="dashed")+
ggtitle("Male vs Female Genitalia")+
xlim(-35,35)+
theme_classic()
